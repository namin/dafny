using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.Dafny;
using Xunit;

public class InductiveProofSketcherTests {
    [Fact]
    public async Task TestGenerateProofSketchNat() {
        var programText = @"
module TestModule {
    lemma TestMethod(n: nat)
        ensures true
    {
        // Proof body to be generated by the sketcher
    }
}
        ";

        var proofSketch = await SetupAndGenerateProofSketch(programText, "TestMethod");

        // Assert that the proof sketch contains induction on n
        Assert.Contains("if (n == 0)", proofSketch); // Base case
        Assert.Contains("else", proofSketch);        // Recursive case
        Assert.Contains("TestMethod(n - 1);", proofSketch); // Recursive call
    }

    [Fact]
    public async Task TestGenerateProofSketchDatatype() {
        var programText = @"
module TestModule {
    datatype Nat = Zero | Succ(pred: Nat)

    lemma TestMethod(n: Nat)
        ensures true
    {
        // Proof body to be generated by the sketcher
    }
}
        ";

        var proofSketch = await SetupAndGenerateProofSketch(programText, "TestMethod");

        // Assert that the proof sketch contains a match on n
        Assert.Contains("match n {", proofSketch);
        Assert.Contains("case Zero() => {", proofSketch); // Base case
        Assert.Contains("case Succ(pred) => {", proofSketch); // Recursive case
        Assert.Contains("TestMethod(pred);", proofSketch); // Recursive call
    }

[Fact]
    public async Task TestFunctionBasedInduction() {
        var programText = @"
    module TestModule {
        function IsEven(n: nat): bool {
            if n == 0 then true
            else if n == 1 then false
            else IsEven(n - 2)
        }

        lemma IsEvenProperty(n: nat)
            requires IsEven(n)
            ensures true
        {
            // Proof body to be generated by the sketcher
        }
    }
        ";

        var proofSketch = await SetupAndGenerateProofSketch(programText, "IsEvenProperty");

        // Assert that the proof sketch uses function-based induction
        Assert.Contains("Function-based induction proof sketch", proofSketch);
        Assert.Contains("if (n == 0)", proofSketch); // First base case
        Assert.Contains("else if (n == 1)", proofSketch); // Second base case
        Assert.Contains("// Base case:", proofSketch);
        Assert.Contains("} else if (n >= 2)", proofSketch); // Inductive case condition
        Assert.Contains("// Inductive case:", proofSketch);
        Assert.Contains("IsEvenProperty(n - 2);", proofSketch); // Recursive lemma invocation
        Assert.Contains("// Prove inductive step here.", proofSketch);
    }

    private async Task<string> SetupAndGenerateProofSketch(string programText, string lemmaName) {
        // Initialize the error reporter
        var inputReader = new StringReader("");  // Empty input for now
        var outputWriter = new StringWriter();
        var errorWriter = new StringWriter();
        var options = new DafnyOptions(inputReader, outputWriter, errorWriter);
        var reporter = new ConsoleErrorReporter(options);

        Uri uri = new Uri("file:///test.dfy");
        var program = await new ProgramParser().Parse(programText, uri, reporter);

        if (reporter.ErrorCount > 0) {
            var errors = string.Join("\n", reporter.AllMessages);
            throw new Exception($"Parsing failed with {reporter.ErrorCount} error(s):\n{errors}");
        }

        var resolver = new ProgramResolver(program);
        await resolver.Resolve(System.Threading.CancellationToken.None);

        if (reporter.ErrorCount > 0) {
            var errors = string.Join("\n", reporter.AllMessages);
            throw new Exception($"Resolving failed with {reporter.ErrorCount} error(s):\n{errors}");
        }

        var lemma = FindMethodByName(program.DefaultModuleDef.TopLevelDecls, lemmaName);
        Assert.NotNull(lemma);

        var sketcher = new InductiveProofSketcher(reporter);
        var proofSketch = sketcher.GenerateProofSketch(lemma, 0);
        return proofSketch;
    }

    private Method? FindMethodByName(IEnumerable<TopLevelDecl> decls, string methodName) {
        foreach (var decl in decls) {
            if (decl is LiteralModuleDecl moduleDecl) {
                var innerDecls = moduleDecl.ModuleDef.TopLevelDecls;
                var result = FindMethodByName(innerDecls, methodName);
                if (result != null) {
                    return result;
                }
            } else if (decl is TopLevelDeclWithMembers membersDecl) {
                foreach (var member in membersDecl.Members) {
                    if (member is Method method && method.Name == methodName) {
                        return method;
                    }
                }
            }
        }
        return null;
    }
}